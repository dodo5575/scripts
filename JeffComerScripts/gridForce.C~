/***************************************************************************
 *cr                                                                       
 *cr            (C) Copyright 1995-2007 The Board of Trustees of the           
 *cr                        University of Illinois                       
 *cr                         All Rights Reserved                        
 *cr                                                                   
 ***************************************************************************/
// Author: Jeff Comer <jcomer2@illinois.edu>

#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

//#define DEBUG

class Vector3;
class Matrix3;
class IndexList;
class ThirdForce;
class Grid;

bool isReal(char c) {
  char num[] = "0123456789-eE.";
  
  for (int i = 0; i < 14; i++) {
    if (c == num[i]) return true;
  }
  return false;
}

bool isInt(char c) {
  char num[] = "0123456789";
  
  for (int i = 0; i < 10; i++) {
    if (c == num[i]) return true;
  }
  return false;
}

int firstSpace(const char* s, int max) {
  for (int i = 0; i < max; i++) {
    if (s[i] == ' ') return i;
  }
  return -1;
}

// A mod like wrapping function
int wrap(int n, double d) {
  double q = (d - n*int(floor(d/n)));
  int w = int(floor(q));
  if (w < 0) w = n;
  if (w >= n) w = 0;
  return w;
}

// A classic growable string class.
class String {
public:
  String() {
    cap = 16;
    c = new char[cap];
    c[0] = '\0';
    len = 1;
  }

  String(const char* s) {
    len = strlen(s) + 1;
    cap = len;
    c = new char[cap];
    for (int i = 0; i < len; i++) c[i] = s[i];
  }

  String(const String& s) {
    len = s.len;
    cap = s.len;
    c = new char[cap];
    for (int i = 0; i < s.len; i++) c[i] = s.c[i];
  }

  String& operator=(const String& s) {
    len = s.len;
    cap = s.len;
    c = new char[cap];
    for (int i = 0; i < s.len; i++) c[i] = s.c[i];
    return *this;
  }

  void add(const char* s) {
    int n = strlen(s) + 1;
    len--;

    if (n + len > cap) grow(n + len);
    for (int i = 0; i < n; i++) c[i+len] = s[i];
    len += n;
  }

  void add(String& s) {
    len--;

    if (len + s.len > cap) grow(len + s.len);
    for (int i = 0; i < s.len; i++) c[i+len] = s[i];
    len += s.len;
  }
  
  int length() const {
    return len-1;
  }

  ~String() {
    delete[] c;
  }
  
  operator const char*() {
    return c;
  }
  
private:
  char* c;
  int cap, len;

  void grow(int n) {
    char* c0 = c;
    c = new char[n];
    cap = n;
    for (int i = 0; i < len; i++) c[i] = c0[i];
    delete[] c0;
  }
};

// class Vector3
// Operations on 3D double vectors
//
class Vector3 {
public:
  Vector3() {}

  Vector3(double s) {
    x = s;
    y = s;
    z = s;
  }

  Vector3(const Vector3& v) {
    x = v.x;
    y = v.y;
    z = v.z;
  }
  
  Vector3(double x0, double y0, double z0) {
    x = x0;
    y = y0;
    z = z0;
  }

  static Vector3 random(double s) {
    Vector3 v;
    v.x = (double(rand())/RAND_MAX-0.5)*s;
    v.y = (double(rand())/RAND_MAX-0.5)*s;
    v.z = (double(rand())/RAND_MAX-0.5)*s;
    return v;
  }

  const Vector3& operator=(const Vector3& v) {
    x = v.x;
    y = v.y;
    z = v.z;
    return *this;
  }

  const Vector3 operator-() const {
    Vector3 v;
    v.x = -x;
    v.y = -y;
    v.z = -z;
    return v;
  }

  const Vector3 operator+(const Vector3& w ) const {
    Vector3 v;
    v.x = x + w.x;
    v.y = y + w.y;
    v.z = z + w.z;
    return v;
  }

  const Vector3 operator-(const Vector3& w ) const {
    Vector3 v;
    v.x = x - w.x;
    v.y = y - w.y;
    v.z = z - w.z;
    return v;
  }
  
  const Vector3 operator*(double s) const {
    Vector3 v;
    v.x = s*x;
    v.y = s*y;
    v.z = s*z;
    return v;
  }

  double dot(const Vector3& w) const {
    return x*w.x + y*w.y + z*w.z;
  }

  double length() const { return sqrt(x*x + y*y + z*z); }
  double length2() const { return x*x + y*y + z*z; }
  String toString() const {
    char s[128];
    sprintf(s, "%.10g %.10g %.10g", x, y, z);
    return String(s);
  }
  double x,y,z;
};

Vector3 operator*(double s, Vector3 v) {
  v.x *= s;
  v.y *= s;
  v.z *= s;
  return v;
}

Vector3 operator/(Vector3 v, double s) {
  v.x /= s;
  v.y /= s;
  v.z /= s;
  return v;
}

// class Matrix3
// Operations on 3D double matrices
//
class Matrix3 {
public:
  Matrix3() {}

  Matrix3(double s) {
    exx = s;
    exy = 0;
    exz = 0;
    eyx = 0;
    eyy = s;
    eyz = 0;
    ezx = 0;
    ezy = 0;
    ezz = s;
  }

  Matrix3(const Vector3& ex, const Vector3& ey, const Vector3& ez) {
    exx = ex.x;
    eyx = ex.y;
    ezx = ex.z;
    exy = ey.x;
    eyy = ey.y;
    ezy = ey.z;
    exz = ez.x;
    eyz = ez.y;
    ezz = ez.z;
    
  }

  const Matrix3 operator*(double s) const {
    Matrix3 m;
    m.exx = s*exx;
    m.exy = s*exy;
    m.exz = s*exz;
    m.eyx = s*eyx;
    m.eyy = s*eyy;
    m.eyz = s*eyz;
    m.ezx = s*ezx;
    m.ezy = s*ezy;
    m.ezz = s*ezz;

    return m;
  }

  const Matrix3 operator-() const {
    Matrix3 m;
    m.exx = -exx;
    m.exy = -exy;
    m.exz = -exz;
    m.eyx = -eyx;
    m.eyy = -eyy;
    m.eyz = -eyz;
    m.ezx = -ezx;
    m.ezy = -ezy;
    m.ezz = -ezz;

    return m;
  }

  Matrix3 transpose() const {
    Matrix3 m;
    m.exx = exx;
    m.exy = eyx;
    m.exz = ezx;
    m.eyx = exy;
    m.eyy = eyy;
    m.eyz = ezy;
    m.ezx = exz;
    m.ezy = eyz;
    m.ezz = ezz;

    return m;
  }

  Matrix3 inverse() const {
    Matrix3 m;
    double det = (exx*(eyy*ezz-eyz*ezy) - exy*(eyx*ezz-eyz*ezx) + exz*(eyx*ezy-eyy*ezx));

    m.exx = (eyy*ezz - eyz*ezy)/det;
    m.exy = -(exy*ezz - exz*ezy)/det;
    m.exz = (exy*eyz - exz*eyy)/det;
    m.eyx = -(eyx*ezz - eyz*ezx)/det;
    m.eyy = (exx*ezz - exz*ezx)/det;
    m.eyz = -(exx*eyz - exz*eyx)/det;
    m.ezx = (eyx*ezy - eyy*ezx)/det;
    m.ezy = -(exx*ezy - exy*ezx)/det;
    m.ezz = (exx*eyy - exy*eyx)/det;

    return m;
  }

 Vector3 transform(const Vector3& v) const {
   Vector3 w;
   w.x = exx*v.x + exy*v.y + exz*v.z;
   w.y = eyx*v.x + eyy*v.y + eyz*v.z;
   w.z = ezx*v.x + ezy*v.y + ezz*v.z;
   return w;
  }
  
  Vector3 ex() const {return Vector3(exx,eyx,ezx);}
  Vector3 ey() const {return Vector3(exy,eyy,ezy);}
  Vector3 ez() const {return Vector3(exz,eyz,ezz);}

  String toString() const {
    char s[128];
    sprintf(s, "%2.8f %2.8f %2.8f\n%2.8f %2.8f %2.8f\n%2.8f %2.8f %2.8f",
		   exx, exy, exz, eyx, eyy, eyz, ezx, ezy, ezz);
    return String(s);
  }

  double exx, exy, exz;
  double eyx, eyy, eyz;
  double ezx, ezy, ezz;
};

Matrix3 operator*(double s, Matrix3 m) { 
  m.exx *= s;
  m.exy *= s;
  m.exz *= s;
  m.eyx *= s;
  m.eyy *= s;
  m.eyz *= s;
  m.ezx *= s;
  m.ezy *= s;
  m.ezz *= s;
  return m;
}

Matrix3 operator/(Matrix3 m, double s) {
  m.exx /= s;
  m.exy /= s;
  m.exz /= s;
  m.eyx /= s;
  m.eyy /= s;
  m.eyz /= s;
  m.ezx /= s;
  m.ezy /= s;
  m.ezz /= s;
  return m;
}


// class IndexList
// A growable list of integers, for holding indices of atoms
//
class IndexList {
public:
  IndexList() {
    num = 0;
    maxnum = 16;
    lis = new int[maxnum];
  }

  IndexList(const IndexList& l) {
    num = l.num;
    maxnum = num + 16;
    lis = new int[maxnum];

    for(int i = 0; i < l.num; i++) lis[i] = l.lis[i];
  }
  
  ~IndexList() {
    delete[] lis;
  }
 
  void add(const int val) {
    // If we need more space, allocate a new block that is 1.5 times larger
    // and copy everything over
    if (num == maxnum) {
      maxnum = (maxnum*3)/2 + 1;
      int* oldlis = lis;
      lis = new int[maxnum];
      int i;
      for(i = 0; i < num; i++) {
        lis[i] = oldlis[i];
      }
      delete [] oldlis;
    }
    
    // We should have enough space now, add the value
    lis[num] = val;
    num++;
  }

  IndexList& operator=(const IndexList& l) {
    delete[] lis;

    num = l.num;
    maxnum = num + 16;
    lis = new int[maxnum];

    for(int i = 0; i < num; i++) lis[i] = l.lis[i];
    return *this;
  }

  void add(const IndexList& l) {
    int oldnum = num;
    num = num + l.num;

    if (num > maxnum) {
      maxnum = (num*3)/2 + 1;
      int* oldlis = lis;
      lis = new int[maxnum];
      
      for(int i = 0; i < oldnum; i++) lis[i] = oldlis[i];
      delete[] oldlis;
    }

    for(int i = 0; i < l.num; i++) lis[i+oldnum] = l.lis[i];
  }

  int length() const {
    return num;
  }
  
  int get(const int i) const {
#ifdef DEBUG 
    if (i < 0 || i >= num) {
      printf("Warning! IndexList::get out of bounds.\n");
      return 0;
    }
#endif
    return lis[i];
  }
  
  void clear() {
    num=0;
    maxnum=16;
    delete[] lis;
    lis = new int[maxnum];
  }

  String toString() const {
    String ret;
    char tmp[32];

    for (int i = 0; i < num; i++) {
      sprintf(tmp, "%i ", lis[i]);
      ret.add(tmp);
    }
    return ret;
  }

private:
  int num;
  int maxnum;
  int* lis;
};


///////////////////////////////////////////////////////////////////////
// Interesting stuff.

///////////////////////////////////////////////////////////////////////
// An array of positions.
class Scatter {
public:
  Scatter(const char* coordFile) {
    // Count the number of points.
    n = countCoordinates(coordFile);
    
    // Load the coordinates.
    r = new Vector3[n];
    readCoordinates(coordFile, n, r);
  }
  
  ~Scatter() {
    delete[] r;
  }

  Matrix3 topMatrix() const {
    if (n < 3) return Matrix3(1.0);
    return Matrix3(r[0], r[1], r[2]);
  }
  Vector3 get(int i) const {
#ifdef DEBUG 
    if (i < 0 || i >= n) {
      printf("Warning! Scatter::get out of bounds.\n");
      return Vector3(0.0);
    }
#endif
    return r[i];
  }
  int length() const {
    return n;
  }

  Vector3 minBound() const {
    Vector3 ret = r[0];
    for (int i = 1; i < n; i++) {
      if (r[i].x < ret.x) ret.x = r[i].x;
      if (r[i].y < ret.y) ret.y = r[i].y;
      if (r[i].z < ret.z) ret.z = r[i].z;
    }
    return ret;
  }

  Vector3 maxBound() const {
    Vector3 ret = r[0];
    for (int i = 1; i < n; i++) {
      if (r[i].x > ret.x) ret.x = r[i].x;
      if (r[i].y > ret.y) ret.y = r[i].y;
      if (r[i].z > ret.z) ret.z = r[i].z;
    }
    return ret;
  }

  static int countCoordinates(const char* fileName) {
    int nRead = 3;
    int n = -1;
    double x, y, z;

    // Open the file.
    FILE* inp = fopen(fileName,"r");
    if (inp == NULL) {
      printf("Couldn't open file %s\n.",fileName);
      exit(-1);
    }

    // Count the lines.
    while (nRead == 3) {
      n++;
      nRead = fscanf(inp,"%lf %lf %lf",&x,&y,&z);
    }
    
    fclose(inp);
    return n;
  }

private:
  int n;
  Vector3* r;

  Scatter(const Scatter&){};

  // Read coordinates into a Vector array.
  void readCoordinates(const char* fileName, int n, Vector3* r) {
    // Open the file.
    FILE* inp = fopen(fileName,"r");
    if (inp == NULL) {
      printf("Couldn't open file %s\n.",fileName);
      exit(-1);
    }
    
    int i;
    int nRead;
    double x, y, z;
    for (i = 0; i < n; i++) {
      nRead = fscanf(inp,"%lf %lf %lf",&x,&y,&z);
      if (nRead != 3) {
	printf("Error reading atom %d (%d)\n.",i,nRead);
	exit(-2);
      }

      r[i].x = x;
      r[i].y = y;
      r[i].z = z; 
    }

    fclose(inp);
  }
};


///////////////////////////////////////////////////////////////////////
// Grid base class.
class Grid {
public:
  Grid(Matrix3 basis0, Vector3 origin0, int nx0, int ny0, int nz0) {
    basis = basis0;
    origin = origin0;
    nx = abs(nx0);
    ny = abs(ny0);
    nz = abs(nz0);
    
    basisInv = basis.inverse();
    size = nx*ny*nz;
    val = new double[size];
    zero();
  }

  Grid(Matrix3 box, Vector3 origin0, double dx) {
    dx = fabs(dx);
    
    // Tile the grid into the system box.
    // The grid spacing is always a bit larger than dx.
    nx = int(floor(box.ex().length()/dx))-1;
    ny = int(floor(box.ey().length()/dx))-1;
    nz = int(floor(box.ez().length()/dx))-1;
    basis = Matrix3(box.ex()/nx, box.ey()/ny, box.ez()/nz);
    origin = origin0;

    basisInv = basis.inverse();
    size = nx*ny*nz;
    val = new double[size];
    zero();
  }

  // Read a grid from a file.
  Grid(const char* fileName) {
    // Open the file.
    FILE* inp = fopen(fileName,"r");
    if (inp == NULL) {
      printf("Grid:Grid Couldn't open file %s\n.",fileName);
      exit(-1);
    }
    printf("Reading dx file %s...\n", fileName);
    
    size = 0;
    nx = 0;
    ny = 0;
    nz = 0;
    basis = Matrix3(1.0);
    origin = Vector3(0.0);    

    int n = 0;
    double x, y, z;
    char line[256];
    int p, nRead;
    int deltaCount = 0;
    Vector3 base[3];
    while (fgets(line, 256, inp) != NULL) {
      // Ignore comments.
      int len = strlen(line);
      if (line[0] == '#') continue;
      if (len < 2) continue;
    
      if (isReal(line[0]) && n < size) {
	// Read grid values.
	nRead = sscanf(line, "%lf %lf %lf", &x, &y, &z);
	if (size > 0) {
	  switch(nRead) {
	  case 1:
	    val[n] = x;
	    n++;
	    break;
	  case 2:
	    val[n] = x;
	    val[n+1] = y;
	    n += 2;
	    break;
	  case 3:
	    val[n] = x;
	    val[n+1] = y;
	    val[n+2] = z;
	    n += 3;
	    break;
	  }
	}
      } else if (len > 5) {
	// Read the grid parameters.
	char start[6];
	for (int i = 0; i < 5; i++) {
	  start[i] = line[i];
	}

	if(strcmp("origi", start) == 0) {
	  // Get an origin line.
	  p = firstSpace(line, 256);
	  sscanf(&(line[p+1]), "%lf %lf %lf", &x, &y, &z);
	  origin = Vector3(x, y, z);
	  //printf("Origin: %.10g %.10g %.10g\n", x, y, z);
	} else if(strcmp("delta", start) == 0) {
	  // Get a delta matrix line.
	  p = firstSpace(line, 256);
	  sscanf(&(line[p+1]), "%lf %lf %lf", &x, &y, &z);
	  base[deltaCount] = Vector3(x, y, z);
	  //printf("Delta %d: %.10g %.10g %.10g\n", deltaCount, x, y, z);
	  if (deltaCount < 2) deltaCount = deltaCount + 1;
	} else if(strcmp("objec", start) == 0) {
	  // Get the system dimensions.
	  if (line[7] != '1') continue;
	  sscanf(line, "object 1 class gridpositions counts %d %d %d\n", &nx, &ny, &nz);
	  size = nx*ny*nz;
	  val = new double[size];
	  zero();
	  //printf("Size: %d %d %d\n", nx, ny, nz);
	}
      }
    }
    fclose(inp);

    basis = Matrix3(base[0], base[1], base[2]);
    basisInv = basis.inverse();
    if (size == 0) {
      printf("Grid:Grid Improperly formatted dx file %s.\n",fileName);
      exit(-1);
    }
  }

  virtual ~Grid() {
    delete[] val;
  }

  virtual void zero() {
    for (int i = 0; i < size; i++) {
      val[i] = 0.0;
    }
  }

  virtual int length() const {
    return size;
  }

  virtual void write(const char* fileName, const char* comments) {
    // Open the file.
    FILE* out = fopen(fileName,"w");
    if (out == NULL) {
      printf("Couldn't open file %s\n.",fileName);
      exit(-1);
    }

    // Write the header.
    fprintf(out, "# %s\n", comments);
    fprintf(out, "object 1 class gridpositions counts %d %d %d\n", nx, ny, nz);
    fprintf(out, "origin %.10g %.10g %.10g\n", origin.x, origin.y, origin.z);
    fprintf(out, "delta %.10g %.10g %.10g\n", basis.exx, basis.eyx, basis.ezx);
    fprintf(out, "delta %.10g %.10g %.10g\n", basis.exy, basis.eyy, basis.ezy);
    fprintf(out, "delta %.10g %.10g %.10g\n", basis.exz, basis.eyz, basis.ezz);
    fprintf(out, "object 2 class gridconnections counts %d %d %d\n", nx, ny, nz);
    fprintf(out, "object 3 class array type double rank 0 items %d data follows\n", size);
    
    // Write the data.
    int penultima = 3*(size/3);
    int mod = size - penultima;

    int i;
    for (i = 0; i < penultima; i+=3) {
      fprintf(out, "%.10g %.10g %.10g\n", val[i], val[i+1], val[i+2]);
    }
    if (mod == 1) {
      fprintf(out, "%.10g\n", val[size-1]);
    } else if (mod == 2) {
      fprintf(out, "%.10g %.10g\n", val[size-2], val[size-1]);
    }
    fclose(out);
  }

  void scale(double s) {
    for (int i = 0; i < size; i++) {
      val[i] *= s;
    }
  }

  // Add a constant gradient to the grid.
  void addGradient(Vector3 g) {
    int j = 0;

    for (int ix = 0; ix < nx; ix++) {
      for (int iy = 0; iy < ny; iy++) {
	for (int iz = 0; iz < nz; iz++) {
	  Vector3 dr = basis.transform(Vector3(ix,iy,iz));
	  double pot0 = dr.dot(g);
	  val[j] += pot0;
	  j++;
	}
      }
    }
  }

  Vector3 getExtent() const {
    return basis.transform(Vector3(nx,ny,nz));
  }

  void addGrid(const Grid& g) {
    int nynz = g.ny*g.nz;
    int i = 0;

    for (int ix = 0; ix < nx; ix++) {
      for (int iy = 0; iy < ny; iy++) {
	for (int iz = 0; iz < nz; iz++) {
	  Vector3 r = basis.transform(Vector3(ix,iy,iz)) + origin;
	  Vector3 rg = g.basisInv.transform(r-g.origin);
	  
	  int gx = int(floor(rg.x + 0.5));
	  int gy = int(floor(rg.y + 0.5));
	  int gz = int(floor(rg.z + 0.5));

	  int k = gz + gy*g.nz + gx*nynz;
	  val[i] += g.val[k];
	  i++;
	}
      }
    }
  }

protected:
  Vector3 origin;
  Matrix3 basis;
  int nx, ny, nz;
  int size;
  Matrix3 basisInv;
  double* val;

private:
  Grid(const Grid&) {}
  Grid operator=(const Grid&) {}
};


///////////////////////////////////////////////////////////////////////
// Cell decomposition of points.
struct SpaceCell {
  IndexList point;
  IndexList neigh;
  int ix, iy, iz;
  int index;
};

class CellDecomposition : public Grid {
public:
  // Make an empty cell decomposition with the desired geometry.
  CellDecomposition(Matrix3 box0, Vector3 origin0, double cutoff) : Grid(box0, origin0, cutoff) {

    cut = cutoff;
    box = box0;
    
    cell = new SpaceCell[size];
    clearCells();
    populateNeighbors();
  }

  virtual ~CellDecomposition() {
    delete[] cell;
  }

  // Find the cell index for a given position.
  int getCell(const Vector3& r) const {
    // Transform.
    Vector3 l = basisInv.transform(r-origin);
    // Wrap into the home box.
    int cx = wrap(nx, l.x);
    int cy = wrap(ny, l.y);
    int cz = wrap(nz, l.z);
    
    int j = cz + cy*nz + cx*nz*ny;
#ifdef DEBUG 
    if (cx < 0 || cx >= nx) {
      printf("Warning! CellDecomposition::getCell cx out of bounds.\n");
      return 0;
    }
    if (cy < 0 || cy >= ny) {
      printf("Warning! CellDecomposition::getCell cy out of bounds.\n");
       return 0;
    }
    if (cz < 0 || cz >= nz) {
      printf("Warning! CellDecomposition::getCell cz out of bounds.\n");
      return 0;
    }
#endif
    return j;
  }
  
  IndexList getCellContents(int i) {
#ifdef DEBUG 
    if (i < 0 || i >= size) {
      printf("Warning! CellDecomposition::getCellContents out of bounds.\n");
      return IndexList();
    }
#endif
    return cell[i].point;
  }

  // Restart with an empty decomposition.
  void clearCells() {
    int j = 0;

    for (int ix = 0; ix < nx; ix++) {
      for (int iy = 0; iy < ny; iy++) {
	for (int iz = 0; iz < nz; iz++) {
	  cell[j].ix = ix;
	  cell[j].iy = iy;
	  cell[j].iz = iz;
	  cell[j].index = j;
	  cell[j].point.clear();
	  val[j] = 0.0;

	  j++;
	}
      }
    }
  }

  // Generate the neighbor lists.
  void populateNeighbors() {
    int j = 0;

    for (int ix = 0; ix < nx; ix++) {
      for (int iy = 0; iy < ny; iy++) {
	for (int iz = 0; iz < nz; iz++) {
	  cell[j].neigh = getNeighbors(j);
	  j++;
	}
      }
    }
  }  

  void addPoint(const Vector3& r, int pointIndex) {
    int j = getCell(r);
    cell[j].point.add(pointIndex);
    val[j] += 1.0;
  }

  void decompose(const Scatter& pos) {
    const int n = pos.length();
    clearCells();

    for (int i = 0; i < n; i++) {
      addPoint(pos.get(i), i);
    }
  }

  int countPoints() const {
    int num = 0;
    for (int j = 0; j < size; j++) {
      num += cell[j].point.length();
    }
    return num;
  }

  IndexList neighborhood(Vector3 r) const {
    int j = getCell(r);
    int nNeighs = cell[j].neigh.length();
    IndexList ret;

    // Get the point indices in all neighbors of the home cell (inclusive).
    for (int n = 0; n < nNeighs; n++) {
      int neigh = cell[j].neigh.get(n);
      
      ret.add(cell[neigh].point);
    }
    return ret;
  }

protected:
  double cut; // cutoff length
  Matrix3 box; // periodic box of the system
  SpaceCell* cell; // contains cell attributes

  // Fill the neighbor list with the cell's neighbors (including itself).
  IndexList getNeighbors(int j) {
    int ix, iy, iz;
    IndexList ret;

    for (ix = -1; ix <= 1; ix++) {
      for (iy = -1; iy <= 1; iy++) {
	for (iz = -1; iz <= 1; iz++) {
	  int cx = cell[j].ix + ix;
	  if (cx >= nx) cx -= nx;
	  if (cx < 0) cx += nx;

	  int cy = cell[j].iy + iy;
	  if (cy >= ny) cy -= ny;
	  if (cy < 0) cy += ny;

	  int cz = cell[j].iz + iz;
	  if (cz >= nz) cz -= nz;
	  if (cz < 0) cz += nz;

	  ret.add(cz + cy*nz + cx*nz*ny);
	}
      }
    }

    return ret;
  }

private:  

  //CellDecomposition(const CellDecomposition&) {}
  //CellDecomposition operator=(const CellDecomposition&) {}
};


///////////////////////////////////////////////////////////////////////
// Generate a third force grid.
class ThirdForceGrid : public Grid {
public:
  ThirdForceGrid(Matrix3 box0, Vector3 origin0, double radius0, double sigma0, double dx) : Grid(box0, origin0, dx) {
    radius = radius0;
    sigma = sigma0;
    
    box = box0;
  }

  // Compute the grid using a cell decomposition, computing the energy between
  // grid points and those source in the neighborhood of the gird point.
  void compute(const Scatter& source, const CellDecomposition& decomp) {
    int j = 0;

    //IndexList one = decomp.neighborhood(Vector3(0.0));
    for (int ix = 0; ix < nx; ix++) {
      for (int iy = 0; iy < ny; iy++) {
	for (int iz = 0; iz < nz; iz++) {
	  Vector3 r = basis.transform(Vector3(ix, iy, iz)) + origin;
	  val[j] = localEnergy(r, source, decomp.neighborhood(r));
	  j++;
	}
      }
      if (ix % 5 == 0) printf("%2.1f percent complete\n", (100.0*j)/size);
    }
  }

  // Compute the energy at position r due to specified source points.
  double localEnergy(Vector3 r, const Scatter& source, const IndexList& neigh) const {
    const int n = neigh.length();
    //printf("%s\n\n",(const char*)neigh.toString());
   
    double e = 0.0;
    for (int i = 0; i < n; i++) {
      Vector3 r0 = source.get(neigh.get(i));
      // Transform the vector between the grid node and the source point into lattice space.
      Vector3 l = basisInv.transform(r - r0);
      // Wrap it according to the periodic boundaries.
      if (l.x < 0.5*nx) {l.x += nx;}
      if (l.x > 0.5*nx) {l.x -= nx;}
      if (l.y < 0.5*ny) {l.y += ny;}
      if (l.y > 0.5*ny) {l.y -= ny;}
      if (l.z < 0.5*nz) {l.z += nz;}
      if (l.z > 0.5*nz) {l.z -= nz;}
      
      // Transform the wrapped vector back into world space.
      Vector3 d = basis.transform(l);
      
      // Acculumulate the energy.
      e += energy(d.length());
    }

    //printf("%.10g\n", e);
    return e;
  }

  // Compute the grid by computing energy between all grid points and all sources :(.
  void compute(const Scatter& source) {
    int j = 0;

    for (int ix = 0; ix < nx; ix++) {
      for (int iy = 0; iy < ny; iy++) {
	for (int iz = 0; iz < nz; iz++) {
	  Vector3 r = basis.transform(Vector3(ix, iy, iz)) + origin;
	  val[j] = globalEnergy(r, source);

	  j++;
	}
      }
      if (ix % 5 == 0) printf("%2.1f percent complete\n", (100.0*j)/size);
    }
  }
 
  // Compute the energy at position r due to all source points.
  // This can be slow for large systems.
  double globalEnergy(Vector3 r, const Scatter& source) const {
    const int n = source.length();
    
    double e = 0.0;
    for (int i = 0; i < n; i++) {
      Vector3 r0 = source.get(i);
      // Transform the vector between the grid node and the source point into lattice space.
      Vector3 l = basisInv.transform(r - r0);
      // Wrap it according to the periodic boundaries.
      if (l.x < 0.5*nx) {l.x += nx;}
      if (l.x > 0.5*nx) {l.x -= nx;}
      if (l.y < 0.5*ny) {l.y += ny;}
      if (l.y > 0.5*ny) {l.y -= ny;}
      if (l.z < 0.5*nz) {l.z += nz;}
      if (l.z > 0.5*nz) {l.z -= nz;}
      
      // Transform the wrapped vector back into world space.
      Vector3 d = basis.transform(l);
      
      // Acculumulate the energy.
      e += energy(d.length());
    }
    return e;
  }
   
  double energy(double r) const {
    if (r < radius) return radius - r + 0.5*sigma;
    if (r > radius + sigma) return 0.0;
    
    double dr = r - radius;
    return dr*(0.5*dr/sigma - 1.0) + 0.5*sigma;
  }

private:
  double radius, sigma;
  Matrix3 box; // periodic box of the system
  //ThirdForceGrid(const ThirdForceGrid&) {}
  //ThirdForceGrid operator=(const ThirdForceGrid&) {}
};


///////////////////////////////////////////////////////////////////////
// Driver
int mainThirdForce(int argc, char* argv[])
{
  char s[128];

  if ( argc != 7 ) {
    printf(
      "Usage: %s coordFile basisFile dx radius0 sigma outFile\n",
      argv[0]);
    return 0;
  }

  // Extract the parameters.
  double dx = strtod(argv[3],NULL);
  double radius = strtod(argv[4],NULL);
  double sigma = strtod(argv[5],NULL);
  printf("\n********************************\nThird force grid: \n");
  printf("The resolution is %.10g.\n", dx);
  printf("Creating a grid with radius0 = %.10g and sigma = %.10g...\n",
	 radius, sigma);

  // Get the system dimensions.
  Scatter sysVec(argv[2]);
  Matrix3 sys = sysVec.topMatrix();
  printf("System dimensions:\n%s\n", (const char*)sys.toString());
  Vector3 origin = (sys.ex() + sys.ey() + sys.ez())*-0.5;
  printf("System origin:%s\n", (const char*)origin.toString());

  // Get the source points.
  Scatter source(argv[1]);
  printf("\nLoaded %i source points from %s\n", source.length(), argv[1]);

  // Generate the cell decomposition.
  double cutoff = 1.8*(radius+sigma);
  printf("\nGenerating cell decomposition for %s with cutoff = %.10g...\n", argv[1], cutoff);
  CellDecomposition cell(sys, origin, cutoff);
  printf("Cell decomposition of %i cells\n", cell.length());
  cell.decompose(source);
  printf("Cell decomposition contains %i points\n", cell.countPoints());

  // Validate the cell decomposition.
  const int nCells = cell.length();
  const int nPoints = source.length();
  
  // Organize the file comments.
  char comments[128];
  //sprintf(comments, "ThirdForce grid for %s with dx = %.10g, radius0 = %.10g, and sigma = %.10g", argv[1], dx, radius, sigma);
  comments[0] = '\0';
  
  // Generate the grid.
  ThirdForceGrid third(sys, origin, radius, sigma, dx);
  printf("\nComputing the grid...\n");
  third.compute(source, cell);
  //third.compute(source);
  printf("Writing the grid...\n");
  third.write(argv[6], comments);
  printf("Wrote %s successfully.\n", argv[6]);

  return 0;
}


///////////////////////////////////////////////////////////////////////
// Driver
int main(int argc, char* argv[])
{
  char s[128];

  if ( argc != 4 ) {
    printf(
	   "Usage: %s dxFile voltageDrop outFile\n",
	   argv[0]);
    return 0;
  }
  double voltage = strtod(argv[2],NULL);

  // Load the grid.
  Grid g(argv[1]);

  // Compute the external field.
  Vector3 extent = g.getExtent();  
  Vector3 eField(0.0, 0.0, -voltage/extent.z);

  // Scale to obtain volts from e/kT.
  g.scale(0.0258520296);

  // Add the external field.
  g.addGradient(eField);

  // Write the result.
  g.write(argv[3], "");
}

void add(Grid& g, const char* fileName) {
  Grid g1(fileName);
  
  g.addGrid(g1);
}

int mainAdd(int argc, char* argv[])
{
  char s[128];
  

  if ( argc < 2 ) {
    printf(
	   "Usage: %s dxFile0 dxFile1...\n",
	   argv[0]);
    return 0;
  }
  
  Grid g0(argv[1]);
  printf("Loaded %s.\n", argv[1]);
  for (int i = 2; i < argc; i++) {
    add(g0, argv[i]);
    printf("Loaded %s.\n", argv[i]);
  }
  // Compute the external field.
  g0.scale(1.0/(argc-1.0));

  // Write the result.
  g0.write("out.dx", "");
}
